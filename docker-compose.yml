# docker-compose.yml
# Ubicar este archivo en la raíz del repositorio (donde están las carpetas frontend y backend)

version: '3.8'

services:
  # Servicio de la base de datos PostgreSQL
  db:
    image: postgres:13-alpine # Usa una imagen de PostgreSQL estable y ligera
    environment:
      POSTGRES_DB: tuu_capricho_db
      POSTGRES_USER: tuu_capricho_user
      POSTGRES_PASSWORD: tu_contraseña_segura_docker # ¡CAMBIA ESTO!
    ports:
      - "5432:5432" # Mapea el puerto del contenedor al host
    volumes:
      - db_data:/var/lib/postgresql/data # Persistencia de datos de la DB
    healthcheck: # Comprobación de salud para esperar a que la DB esté lista
      test: ["CMD-SHELL", "pg_isready -U tuu_capricho_user -d tuu_capricho_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Servicio del Backend (Node.js/Express)
  backend:
    build:
      context: ./backend # Ruta al Dockerfile del backend
      dockerfile: Dockerfile # Nombre del Dockerfile en el contexto
    ports:
      - "8080:8080" # Mapea el puerto del contenedor al host
    env_file:
      - ./backend/.env # Carga las variables de entorno desde un archivo .env
    volumes:
      - ./backend/src:/usr/src/app/src # Monta el código fuente en el contenedor
    depends_on:
      - db # El backend depende del servicio de la DB
    networks:
      - app-network

  # Servicio del Frontend (React.js)
  frontend:
    build:
      context: ./frontend # Ruta al Dockerfile del frontend
      dockerfile: Dockerfile # Nombre del Dockerfile en el contexto
    ports:
      - "80:80" # Expone el puerto 80 del contenedor al puerto 80 del host
    environment:
      REACT_APP_API_URL: http://localhost/api # Nginx en el frontend proxeará a /api, que apunta al backend
    depends_on:
      - backend # El frontend depende del backend (aunque Nginx es el que hace la llamada)
    networks:
      - app-network

volumes:
  db_data: # Define el volumen para los datos de PostgreSQL

networks:
  app-network:
    driver: bridge